import os
import random
from dotenv import load_dotenv
from openai import OpenAI
from .utils import Utils
from .matcher import Matcher

load_dotenv()


class Chatbot:
    """A chatbot that combines intent-based responses with OpenAI GPT responses."""

    def __init__(self, intents_path="data/intents.json", threshold=0.8):
        """
        Initialize the chatbot with loaded intents and OpenAI client.

        Args:
            intents_path (str): Path to the intents JSON file.
            threshold (float): Minimum confidence score to accept an intent match.
        """
        self.intents = Utils.load_intents(intents_path)
        self.threshold = threshold
        self.oclient = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

    def callOpenAI(self, user_input):
        """
        Get a response from the OpenAI model when no intent matches.

        Args:
            user_input (str): The user's message.

        Returns:
            str: The response generated by the OpenAI model.
        """
        messages = [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": user_input}
        ]

        response = self.oclient.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            max_tokens=500
        )

        return response.choices[0].message.content

    def get_response(self, user_input):
        """
        Determine the best response for the user's input.

        Args:
            user_input (str): The user's message.

        Returns:
            str: Either an intent-based response or an OpenAI-generated one.
        """
        clean = Utils.normalize_text(user_input)
        tag, score = Matcher.get_best_intent(clean, self.intents)

        if tag and score >= self.threshold:
            for intent in self.intents["intents"]:
                if intent["tag"] == tag:
                    return random.choice(intent["responses"])

        return self.callOpenAI(user_input)

    def chat(self):
        """Start an interactive chat session with the chatbot."""
        print("Chatbot is running. Type 'quit' to exit.")
        while True:
            user_text = input("> ")
            if user_text.lower() in ["quit", "exit"]:
                print("ðŸ‘‹ Bye!")
                break
            print(self.get_response(user_text))


if __name__ == "__main__":
    bot = Chatbot()
    bot.chat()
